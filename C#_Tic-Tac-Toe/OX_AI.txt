// dfs 判断当前状态cur是否为可赢局面
        int dfs(int cur) // cur中每一位 0-未放 1-自己 2-对方
        {
            if (dp[cur] != -1) return dp[cur]; // 记忆化搜索
            dp[cur] = 0;
            int i,j;
            for(i=0;i<9;i++)
            {
                if((cur/fac[i])%3==0)
                {
                    int now = cur + fac[i];
                    if(isok(now))  // 自己走一步能赢
                    {
                        dp[cur] = 1;
                        nextstep[cur] = i;
                        break;
                    }
                    int tmp, flag = 1,inloop=0;  // inloop不可少 少了平局时状态会算错 debug好久
                    for (j = 0; j < 9;j++ )  // 对手任意走 自己仍是可赢局面则这个状态为可赢局面
                    {
                        if((now/fac[j])%3==0)
                        {
                            inloop = 1;
                            tmp = now;
                            tmp += 2 * fac[j];
                            if (isok1(tmp)||dfs(tmp) == 0) { flag = 0; break; }
                        }
                    }
                    if (inloop==1&&flag== 1)
                    {
                        dp[cur] = 1;
                        nextstep[cur] = i;
                        break;
                    }
                }
            }
            return dp[cur];
        }
        void DiffInit()
        {
            int i,j;
            fac[0] = 1;
            for (i = 1; i < 10; i++) 
            {
	fac[i] = fac[i - 1] * 3;
            }
            for (i = 0; i < 19683; i++) 
            {
	dp[i] = -1;
            }
            for(i=0;i<19683;i++)
            {
                if (dp[i] == -1)
                {
                    int cnt1, cnt2;
                    cnt1 = cnt2 = 0;
                    for (j = 0; j < 9;j++)
                    {
                        if ((i / fac[j]) % 3 == 1) cnt1++;
                        else if ((i / fac[j]) % 3 == 2) cnt2++;
                    }
                    if (cnt1 == cnt2 || cnt1 == cnt2 - 1) dfs(i);
                    else dp[i] = 0;
                }
            }
        }